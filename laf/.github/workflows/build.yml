name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        backend: [none, skia]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          if [[ "${{ matrix.backend }}" == "skia" ]] ; then
            choco install wget
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          brew install pixman freetype harfbuzz zlib
          if [[ "${{ matrix.backend }}" == "skia" ]] ; then
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-x64.zip
            unzip Skia-macOS-Release-x64.zip -d skia
          fi
        else
          sudo apt-get update -qq
          sudo apt-get install -y \
            libc++-12-dev libc++abi-12-dev \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev
          if [[ "${{ matrix.backend }}" == "skia" ]] ; then
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64.zip
            unzip Skia-Linux-Release-x64.zip -d skia
          fi
        fi
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - uses: seanmiddleditch/gha-setup-ninja@master
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          if [[ "${{ matrix.backend }}" == "skia" ]] ; then
            cmake . -G Ninja \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DLAF_BACKEND=${{ matrix.backend }} \
              -DSKIA_DIR=skia \
              -DSKIA_LIBRARY_DIR=skia/out/Release-x64
          else
            cmake . -G Ninja \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DLAF_BACKEND=${{ matrix.backend }}
          fi
        elif [[ "${{ runner.os }}" == "Linux" ]] && \
             [[ "${{ matrix.backend }}" == "skia" ]] ; then
          export CC=clang-12
          export CXX=clang++-12
          cmake . -G Ninja \
            -DCMAKE_CXX_FLAGS=-stdlib=libc++ \
            -DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ \
            -DLAF_BACKEND=${{ matrix.backend }} \
            -DSKIA_DIR=skia
        else
          cmake . -G Ninja \
            -DLAF_BACKEND=${{ matrix.backend }} \
            -DSKIA_DIR=skia
        fi
    - name: Compiling
      shell: bash
      run: |
        ninja
    - name: Running Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        $XVFB ctest --output-on-failure --exclude-regex app_main_tests
